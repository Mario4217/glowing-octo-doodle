<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-5</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///mainmenu
ui_init();
ui_style_load("style.txt");
interface[? "menu"] = "1";
interface[? "submenu"] = 0;

menu_container = ui_create_container(0,0,1,1);
menu_main = ui_create_container(0,0,1,1);
menu_play = ui_create_container(1,0,2,1);
menu_profile = ui_create_container(1,0,2,1);
menu_editor = ui_create_container(1,0,2,1);
menu_settings = ui_create_container(1,0,2,1);
ui_add_child(menu_container, menu_main);
ui_add_child(menu_container, menu_play);
ui_add_child(menu_container, menu_profile);
ui_add_child(menu_container, menu_editor);
ui_add_child(menu_container, menu_settings);

btn_play = ui_create_button(0.1,0.3,0.4,0.35,"{menu.play}","set menu 2");
var btn_profile = ui_create_button(0.1,0.4,0.4,0.45,"{menu.profile}","set menu 3");
var btn_settings = ui_create_button(0.1,0.5,0.4,0.55,"{menu.settings}","set menu 4");
var btn_editor = ui_create_button(0.1,0.6,0.4,0.65,"{menu.editor}","set menu 5");

ui_add_child(menu_main,ui_create_label(0.1,0.2,0.4,0.28,"{menu.main}"));
ui_add_child(menu_main,btn_play);
btn_disconnect = ui_add_child(menu_main,ui_create_button(0.1, 0.3, 0.4, 0.35, "{menu.disconnect}", "disconnect"));
btn_pack_end = ui_add_child(menu_main,ui_create_button(0.1, 0.3, 0.4, 0.35, "{menu.end_pack}", "current_pack_end"));
btn_end_testmode = ui_add_child(menu_main,ui_create_button(0.1, 0.3, 0.4, 0.35, "{editor.testmode.back}", ""));
ui_add_child(menu_main,btn_profile);
ui_add_child(menu_main,btn_settings);
ui_add_child(menu_main,btn_editor);
ui_add_child(menu_main,ui_create_button(0.1,0.7,0.4,0.75,"{menu.quit}","quit"));

btn_disconnect[? "visible"] = false;
btn_pack_end[? "visible"] = false;
btn_end_testmode[? "visible"] = false;

//######---Current-Pack---##########
lb_current_pack = ui_add_child(menu_main, ui_create_label(0.8,0,1,0.05,""));

//###############---Play---####################
ui_add_child(menu_play,ui_create_label(0.1,0.2,0.4,0.28,"{menu.play}"));
btn_new_game = ui_add_child(menu_play,ui_create_button(0.1,0.3,0.4,0.35,"{menu.play.new}","set submenu 1"));
ui_add_child(menu_play,ui_create_button(0.1,0.4,0.4,0.45,"{menu.play.join}","set submenu 2"));
btn_play_continue = ui_add_child(menu_play,ui_create_button(0.1,0.5,0.4,0.55,"{menu.play.continue}","set submenu 3"));

menu_play_packs = ui_add_child(menu_play,ui_create_scroll(0.5,0.2,0.9,0.9));
menu_play_saves = ui_add_child(menu_play,ui_create_scroll(0.5,0.2,0.9,0.9));

var btn_back = ui_create_button(0.1,0.85,0.4,0.9,"{menu.back}","set menu 1");
ui_add_child(menu_play,btn_back);
btn_back[? "gp_port"] = btn_play;

//###############---Editor---######################
ui_add_child(menu_editor,ui_create_label(0.1,0.2,0.4,0.28,"{menu.editor}"));
btn_maps = ui_add_child(menu_editor,ui_create_button(0.1,0.3,0.4,0.35,"{menu.editor.maps}","set submenu 1"));
btn_packs = ui_add_child(menu_editor,ui_create_button(0.1,0.4,0.4,0.45,"{menu.editor.packs}","set submenu 2"));
menu_editor_level = ui_add_child(menu_editor,ui_create_scroll(0.5,0.2,0.9,0.9));
menu_editor_packs = ui_add_child(menu_editor,ui_create_scroll(0.5,0.2,0.9,0.9));
var btn_back = ui_create_button(0.1,0.85,0.4,0.9,"{menu.back}","set menu 1");
ui_add_child(menu_editor,btn_back);
btn_back[? "gp_port"] = btn_editor;

//###############---Profile---#######################
ui_add_child(menu_profile,ui_create_label(0.1,0.2,0.4,0.28,"{menu.profile}"));
var btn_back = ui_create_button(0.1,0.85,0.4,0.9,"{menu.back}","set menu 1");
ui_add_child(menu_profile,btn_back);
btn_back[? "gp_port"] = btn_profile;

var profile_label = ui_create_label(0.1,0.3,0.4,0.8,"");
ui_add_child(menu_profile,profile_label);
ui_add_child(profile_label,ui_create_sprite(0.5, 0.1, 0.9, 0.3, spr_ballbot_front, 6));
profile_sprite_secondary = ui_add_child(profile_label,ui_create_sprite(0.5, 0.1, 0.9, 0.3, spr_ballbot_front_secondary, 6));
profile_sprite_secondary_white = ui_add_child(profile_label,ui_create_sprite(0.1, 0.1, 0.5, 0.3, spr_white, 0));

ui_add_child(profile_label, ui_create_label(0.1,0.35,0.9,0.4,"{menu.profile.color}"));
var sli_red = ui_set_value(ui_set_event(ui_add_child(profile_label,ui_create_slider(0.1, 0.4, 0.9, 0.5, "{menu.profile.red}", 0, 255, 1)), "onchange", "edit_profile red !value"), profile_map[? "red"]);
ui_set_value(ui_set_event(ui_add_child(profile_label,ui_create_slider(0.1, 0.5, 0.9, 0.6, "{menu.profile.green}", 0, 255, 1)), "onchange", "edit_profile green !value"), profile_map[? "green"]);
var sli_blue = ui_set_value(ui_set_event(ui_add_child(profile_label,ui_create_slider(0.1, 0.6, 0.9, 0.7, "{menu.profile.blue}", 0, 255, 1)), "onchange", "edit_profile blue !value"), profile_map[? "blue"]);
ui_add_child(profile_label, ui_create_label(0.1,0.75,0.9,0.8,"{menu.profile.playername}"));
var txt_name = ui_set_value(ui_set_event(ui_add_child(profile_label, ui_create_textbox(0.1,0.8,0.9,0.9,32,"Hans",false)), "onchange", 'edit_profile name "!value"'), profile_map[? "name"]);

btn_back[? "gp_up"] = sli_blue;
sli_blue[? "gp_down"] = btn_back;
btn_back[? "gp_down"] = sli_red;
sli_red[? "gp_up"] = btn_back;
//###############---Settings---#######################
ui_add_child(menu_settings,ui_create_label(0.1,0.2,0.4,0.28,"{menu.settings}"));
var set_label = ui_create_label(0.2,0.3,0.8,0.8,"");
ui_add_child(menu_settings,set_label);

var v = 0.1;
var h = 0.08;
set_fullscreen = ui_create_toggle(0.05,v,0.45,v+h,"{menu.settings.fullscreen}");
ui_set_event(set_fullscreen, "onchange", "fullscreen !value");
ui_add_child(set_label,set_fullscreen);
v += 0.1;
set_vsync = ui_create_toggle(0.05,v,0.45,v+h,"{menu.settings.vsync}");
ui_set_event(set_vsync, "onchange", "set_vsync !value");
ui_add_child(set_label,set_vsync);
v += 0.1;
var label = ui_create_label(0.05,v,0.45,v+h,"{menu.settings.anti-aliasing}");
ui_add_child(set_label, label);
ui_set_value(label, 0);
var r0 = ui_create_radio(0,1,0.25,2,"x0",0);
var r2 = ui_create_radio(0.25,1,0.5,2,"x2",2);
var r4 = ui_create_radio(0.5,1,0.75,2,"x4",4);
var r8 = ui_create_radio(0.75,1,1,2,"x8",8);
r0[? "gp_right"] = r2;
r2[? "gp_right"] = r4;
r4[? "gp_right"] = r8;
r8[? "gp_right"] = r0;
r0[? "gp_left"] = r8;
r2[? "gp_left"] = r0;
r4[? "gp_left"] = r2;
r8[? "gp_left"] = r4;
r0[? "gp_up"] = set_vsync;
r2[? "gp_up"] = set_vsync;
r4[? "gp_up"] = set_vsync;
r8[? "gp_up"] = set_vsync;
ui_add_child(label, r0);
ui_add_child(label, r2);
ui_add_child(label, r4);
ui_add_child(label, r8);
ui_set_event(label, "onchange", "set_aa !value");
set_vsync[? "gp_down"] = r2;
set_aa = label;

v += 0.1+h;
ui_add_child(set_label, ui_create_label(0.05,v,0.45,v+h,"{menu.settings.audio}"));
v += h;
var set = ui_create_slider(0.05,v,0.45,v+h,"{menu.settings.volume_music}",0,100,1);
ui_set_event(set, "onchange", "");
ui_add_child(set_label,set);
set[? "gp_up"] = r0;
r0[? "gp_down"] = set;
r2[? "gp_down"] = set;
r4[? "gp_down"] = set;
r8[? "gp_down"] = set;
var set = ui_create_slider(0.05,v+h,0.45,v+h+h,"{menu.settings.volume_sfx}",0,100,1);
ui_set_event(set, "onchange", "");
ui_add_child(set_label,set);
v += h+0.1;

ui_add_child(set_label, ui_create_label(0.05,v,0.45,v+h,"{menu.settings.gamepad}"));
v +=h;
var set_inner_deadzone = ui_create_slider(0.05, v, 0.45, v+h, "{menu.settings.inner_deadzone}", 0, 50, 1);
ui_set_event(set_inner_deadzone, "onchange", "set_inner_deadzone !value");
ui_add_child(set_label, set_inner_deadzone);
var set_outer_deadzone = ui_create_slider(0.05, v+h, 0.45, v+h+h, "{menu.settings.outer_deadzone}", 0, 50, 1);
ui_set_event(set_outer_deadzone, "onchange", "set_outer_deadzone ! value");
ui_add_child(set_label, set_outer_deadzone);

var btn_back = ui_create_button(0.1,0.85,0.4,0.9,"{menu.back}","set menu 1");

//bindings
var v = 0.1;
var h = 0.08;
var l = 0.55;
var r = 0.95;
var line = 0.7;
ui_add_child(set_label,ui_create_label(l,v,r,v+h,"{menu.settings.bindings}"));
v += h;
ui_add_child(set_label,ui_create_label(l,v,line,v+h,"{menu.settings.walk_up}"));
ui_add_child(set_label,ui_create_binding(line,v,r,v+h,"player_vertical",0,-1));
v += h;
ui_add_child(set_label,ui_create_label(l,v,line,v+h,"{menu.settings.walk_down}"));
ui_add_child(set_label,ui_create_binding(line,v,r,v+h,"player_vertical",1,1));
v += h;
ui_add_child(set_label,ui_create_label(l,v,line,v+h,"{menu.settings.walk_left}"));
ui_add_child(set_label,ui_create_binding(line,v,r,v+h,"player_horizontal",0,-1));
v += h;
ui_add_child(set_label,ui_create_label(l,v,line,v+h,"{menu.settings.walk_right}"));
ui_add_child(set_label,ui_create_binding(line,v,r,v+h,"player_horizontal",1,1));
v += h;
ui_add_child(set_label,ui_create_label(l,v,line,v+h,"{menu.settings.interact}"));
ui_add_child(set_label,ui_create_binding(line,v,r,v+h,"interact",0,1));
v += h;
ui_add_child(set_label,ui_create_label(l,v,line,v+h,"{menu.settings.putdown}"));
ui_add_child(set_label,ui_create_binding(line,v,r,v+h,"putdown",0,1));

ui_add_child(menu_settings,btn_back);

btn_back[? "gp_port"] = btn_settings;
btn_back[? "gp_up"] = set_outer_deadzone;
set_outer_deadzone[? "gp_down"] = btn_back;
btn_back[? "gp_down"] = set_fullscreen;
set_fullscreen[? "gp_up"] = btn_back;

var children = menu_main[? "children"];
ui_gamepad_position = children[| 1];

btn_play[? "gp_port"] = ds_list_find_value(ds_map_find_value(menu_play,"children"), 1);
btn_profile[? "gp_port"] = ds_list_find_value(ds_map_find_value(menu_profile,"children"), 1);
btn_editor[? "gp_port"] = ds_list_find_value(ds_map_find_value(menu_editor,"children"), 1);
btn_settings[? "gp_port"] = ds_list_find_value(set_label[? "children"], 0);

ui_set_value(set_fullscreen, settings_map[? "fullscreen"]);
ui_set_value(set_aa, settings_map[? "aa"]);
ui_set_value(set_vsync, settings_map[? "vsync"]);
ui_set_value(set_inner_deadzone, settings_map[? "inner_deadzone"]);
ui_set_value(set_outer_deadzone, settings_map[? "outer_deadzone"]);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ui_set_position(menu_main,ui_interpolate(1, menu_main[? "u1"],-1+(interface[? "menu"]=="1"), 0.3),0);
ui_set_position(menu_play,ui_interpolate(1, menu_play[? "u1"], -1+(interface[? "menu"]=="2"), 0.3),0);
ui_set_position(menu_profile,ui_interpolate(1, menu_profile[? "u1"], -1+(interface[? "menu"]=="3"), 0.3),0);
ui_set_position(menu_settings,ui_interpolate(1, menu_settings[? "u1"], -1+(interface[? "menu"]=="4"), 0.3),0);
ui_set_position(menu_editor,ui_interpolate(1, menu_editor[? "u1"], -1+(interface[? "menu"]=="5"), 0.3),0);

menu_main[? "visible"] =  (menu_main[? "u1"] &gt; -0.2);
menu_play[? "visible"] =  (menu_play[? "u1"] &gt; -0.2);
menu_profile[? "visible"] =  (menu_profile[? "u1"] &gt; -0.2);
menu_settings[? "visible"] =  (menu_settings[? "u1"] &gt; -0.2);
menu_editor[? "visible"] =  (menu_editor[? "u1"] &gt; -0.2);

menu_play_packs[? "visible"] = (interface[? "menu"] == "2" &amp;&amp; interface[? "submenu"] == 1);
menu_play_saves[? "visible"] = (interface[? "menu"] == "2" &amp;&amp; interface[? "submenu"] == 3);
menu_editor_level[? "visible"] = (interface[? "menu"] == "5" &amp;&amp; interface[? "submenu"] == 1);
menu_editor_packs[? "visible"] = (interface[? "menu"] == "5" &amp;&amp; interface[? "submenu"] == 2);

ui_step();

var btn_for_gamepad = btn_play;

btn_disconnect[? "visible"] = false;
btn_pack_end[? "visible"] = false;
btn_play[? "visible"] = false;
btn_end_testmode[? "visible"] = false;

lb_current_pack[? "visible"] = (current_pack != -1)
if (testmode == ""){
  btn_end_testmode[? "visible"] = false;
  if (current_pack != -1){
    btn_play[? "visible"] = false;
    ui_set_text(lb_current_pack, current_pack[? "name"]);
    if (is_server){
      btn_disconnect[? "visible"] = false;
      btn_pack_end[? "visible"] = true;
      btn_for_gamepad = btn_pack_end;
    }else{
      btn_disconnect[? "visible"] = true;
      btn_pack_end[? "visible"] = false;
      btn_for_gamepad = btn_disconnect;
    }
  }else{
    btn_play[? "visible"] = true;
    btn_disconnect[? "visible"] = false;
    btn_pack_end[? "visible"] = false;
  }
}else{
  btn_end_testmode[? "visible"] = true;
}


if (room == rm_game){
  if (bind_check_pressed("menu") || (gamepad_button_check_pressed(0, gp_face2) &amp;&amp; interface[? "menu"] != "0")){
    ui_gamepad_position = btn_for_gamepad;
    if (interface[? "submenu"] == 0){
      if (interface[? "menu"] == "1"){
        interface[? "menu"] = "0";
      }else{
        if(real(interface[? "menu"]) &gt; 2){
          ui_gamepad_position = ds_list_find_value(menu_main[? "children"],real(interface[? "menu"])-1);
        }
        interface[? "menu"] = "1";
      }
    }else{
      if (interface[? "menu"] == "5"){
        ui_gamepad_position = btn_maps;
      }
      if (interface[? "menu"] == "2"){
        ui_gamepad_position = btn_new_game;
      }
      interface[? "submenu"] = 0;
    }
  }
}
/*
if (gamepad_button_check_pressed(0, gp_face2) &amp;&amp; room == rm_game){
  if (real(interface[? "menu"]) &gt; 1){
    ui_gamepad_position = ds_list_find_value(menu_main[? "children"],real(interface[? "menu"])-1);
    interface[? "menu"] = "1";
  }
}
*/
profile_sprite_secondary[? "blend"] = make_color_rgb(profile_map[? "red"], profile_map[? "green"], profile_map[? "blue"]);
profile_sprite_secondary_white[? "blend"] = make_color_rgb(profile_map[? "red"], profile_map[? "green"], profile_map[? "blue"]);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (room == rm_game){
  interface[? "menu"] = "0";
  if (global.current_map_path == "maps/dGl0bGU=.puz"){
    interface[? "menu"] = "1";
  }
  interface[? "submenu"] = 0;
  ui_gamepad_position = btn_play;
  refresh_editor_level();
  refresh_packs();
  refresh_saves();
}

if (testmode != ""){
  btn_end_testmode[? "onclick"] = "editor "+string(testmode);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="75">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for (var i=0; i&lt;ds_list_size(ui_cmd_queue); i+=1){
  console_command_execute(ui_cmd_queue[| i]);
};
ds_list_clear(ui_cmd_queue);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(ft_ui);
if (room != rm_editor &amp;&amp; interface[? "menu"]!="0" &amp;&amp; room != rm_pack_editor){
  ui_draw(menu_container);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
