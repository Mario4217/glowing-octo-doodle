<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_clip</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>player_pawn = instance_create(100, 100, obj_player_pawn);
player_pawn.secondary_color = make_color_rgb(profile_map[? "red"], profile_map[? "green"], profile_map[? "blue"]);

profile_map[? "pawn"] = player_pawn;
is_using_gamepad = false;
putdown_x = x;
putdown_y = y;

move_spd = 400;
pickup_distance = 100;
pawns = -1;
interact_inst = -1;

messagebox = -1;

if (testmode != ""){
  pawns = ds_list_create();
  pawns[| 0] = player_pawn;
  //wait for spawns to spawn
  alarm[0] = 5;
}

//moved bind stuff to the init object

gamepad_help = ui_create_container(0,0.9,0.3,0.95);
gamepad_help_sprite = ui_create_sprite(0,0,0.2,1,spr_gamepad_icons, 0);
gamepad_help_text = ui_create_label(0.2,0,1,1, "");
ui_add_child(gamepad_help, gamepad_help_sprite);
ui_add_child(gamepad_help, gamepad_help_text);

msgbox_body = ui_create_label(0.3,0.8,0.7,1,"");
msgbox_title = ui_create_label(0,0,1,0.2,"");
msgbox_next = ui_create_sprite(0.9,0.9,1,1,spr_ui_msgbox_next, 0);
msgbox_text = "";
ui_add_child(msgbox_body, msgbox_title);
ui_add_child(msgbox_body, msgbox_next);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///spawn other players if in testmode
if (testmode != ""){
  for (var i=1; i&lt;obj_world.world_players; i+=1)
  {
    var inst = instance_create(i*32, 0, obj_player_pawn);
    ds_list_add(pawns, inst);
    for (var j=0; j&lt;instance_number(obj_gp_spawn); j+=1)
    {
      var spwn = instance_find(obj_gp_spawn, j);
      if (spwn.attr[? ATTRIBUTE.player_index] == i){
        inst.x = spwn.x;
        inst.y = spwn.y;
      }
    };
  };
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>interact_inst = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var can_control = (interface[? "menu"] == "0" &amp;&amp; !console_is_open &amp;&amp; (messagebox == -1));

if (is_network &amp;&amp; current_pack != -1){
  if (ds_map_size(nw_players)&lt;current_pack[? "players"]){
    can_control = false;
  }
}

var xmov = bind_check("player_horizontal") * can_control;
var ymov = bind_check("player_vertical") * can_control;

//player_pawn.dir = 3;
player_pawn.walking = false;

if (xmov &gt; 0){
  player_pawn.dir = 0;
  player_pawn.walking = true;
}else if (xmov &lt; 0){
  player_pawn.dir = 2;
  player_pawn.walking = true;
}else if (ymov &gt; 0){
  player_pawn.dir = 3;
  player_pawn.walking = true;
}else if (ymov &lt; 0){
  player_pawn.dir = 1;
  player_pawn.walking = true;
}

var spd = game_delta_time * move_spd * point_distance(0, 0, xmov, ymov);

var dir = point_direction(0,0,xmov, ymov);

var pawn = player_pawn;
pawn.xdis = lengthdir_x(spd, dir);
pawn.ydis = lengthdir_y(spd, dir);

with (pawn){
  if (place_meeting(x + xdis, y, obj_clip) &amp;&amp; !cheat_noclip) {
    while (!place_meeting(x + sign(xdis), y, obj_clip)){
      x += sign(xdis);
    }
    xdis = 0;
  }
  x += xdis;
  
  if (place_meeting(x, y + ydis, obj_clip) &amp;&amp; !cheat_noclip) {
    while (!place_meeting(x, y + sign(ydis), obj_clip)){
      y += sign(ydis);
    }
    ydis = 0;
  }
  y += ydis;
}

view_xview[0] = floor(player_pawn.x - view_wview[0]/2);
view_yview[0] = floor(player_pawn.y - view_hview[0]/2);

if (is_using_gamepad){
  var dis = 48;
  putdown_x = player_pawn.center_x+lengthdir_x(dis,player_pawn.dir*90);
  putdown_y = player_pawn.center_y+lengthdir_y(dis,player_pawn.dir*90);
}

pickup = player_pawn.pickup;
if (!is_using_gamepad){
  putdown_x = mouse_x;
  putdown_y = mouse_y;
}

if (pickup != -1){
  if (bind_check_pressed('putdown') &amp;&amp; can_control &amp;&amp; point_distance(player_pawn.x, player_pawn.y, putdown_x, putdown_y) &lt; pickup_distance
  &amp;&amp; !collision_rectangle(putdown_x-pickup.sprite_xoffset, putdown_y-pickup.sprite_yoffset, putdown_x-pickup.sprite_xoffset+pickup.sprite_width, putdown_y-pickup.sprite_yoffset+pickup.sprite_height, obj_clip, 0, 1)
  &amp;&amp; !collision_line(putdown_x, putdown_y, player_pawn.x, player_pawn.y, obj_clip, 0, 1)
  &amp;&amp; !collision_line(putdown_x, putdown_y, player_pawn.x, player_pawn.y, obj_gp_carry_blocker, 0, 1)
  ){
    gp_putdown(player_pawn, putdown_x, putdown_y);
    if (is_network){
      buffer_seek(nw_buffer, buffer_seek_start, 0);
      buffer_write(nw_buffer, buffer_u8, NW.pawn_putdown);
      if (is_server){
        buffer_write(nw_buffer, buffer_u8, 0);
      }
      buffer_write(nw_buffer, buffer_u16, putdown_x);
      buffer_write(nw_buffer, buffer_u16, putdown_y);
      nw_broadcast(nw_buffer);
    }
  }
}

if (testmode != ""){
  if (bind_check_pressed("player_swap") &amp;&amp; can_control){
    var index = (ds_list_find_index(pawns, player_pawn) + 1) % ds_list_size(pawns);
    player_pawn = pawns[| index];
  }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (testmode != ""){
  ds_list_destroy(pawns);
}
ds_map_destroy(gamepad_help);
ds_map_destroy(msgbox_body);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (testmode != ""){
  for (i=0; i&lt;view_wport[0]/64; i+=1)
  {
    draw_background(bg_testmode, i*64,0);
    draw_background(bg_testmode, i*64,view_hport[0]-32);
  };
  
  draw_set_font(ft_testmode);
  draw_set_color(c_white);
  draw_set_valign(fa_middle);
  draw_text(0,16,lang_format("{editor.testmode}",testmode));
  if (ds_list_size(pawns) &gt; 1){
    draw_text(0,view_hport[0]-16,lang_format("{editor.testmode.current_player}",ds_list_find_index(pawns, player_pawn),ds_list_size(pawns)-1,lang_format(bind_string(bind_get("player_swap",0)))));
  }
  draw_set_valign(fa_top);
}

if (is_using_gamepad){
  gamepad_help[? "visible"] = false;
  if (interact_inst != -1){
    gamepad_help[? "visible"] = true;
    gamepad_help_sprite[? "image"] = 0;
    ui_set_text(gamepad_help_text, "{menu.settings.interact}");
  }
  if (player_pawn.pickup != -1){
    gamepad_help[? "visible"] = true;
    gamepad_help_sprite[? "image"] = 1;
    ui_set_text(gamepad_help_text, "{menu.settings.putdown}");
  }
  draw_set_font(ft_ui);
  ui_draw(gamepad_help);
}

if (messagebox != -1 &amp;&amp; interface[? "menu"] == "0"){
  draw_set_font(ft_ui);
  var complete_text = lang_format(messagebox.attr[? ATTRIBUTE.text]);
  if (string_length(msgbox_text) &lt; string_length(complete_text)){
    msgbox_text += string_char_at(complete_text, string_length(msgbox_text)+1);
  }
  ui_set_text(msgbox_title, messagebox.attr[? ATTRIBUTE.title]);
  ui_set_text(msgbox_body, msgbox_text);
  msgbox_next[? "visible"] = (msgbox_text == complete_text);
  ui_draw(msgbox_body);
  if (bind_check_pressed("interact") &amp;&amp; msgbox_text == complete_text){
    msgbox_text = "";
    with (messagebox){
      obj_player_controller.messagebox = -1;
      event_trigger(EVENT.onNext);
    }
  }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (is_using_gamepad){
  if (interact_inst != -1){
    var ent = interact_inst;
    draw_set_color(c_lime);
    draw_rectangle(ent.bbox_left, ent.bbox_top, ent.bbox_right, ent.bbox_bottom, true);
  }
  if (player_pawn.pickup != -1){
    var pickup = player_pawn.pickup;
    draw_sprite_ext(pickup.sprite_index, pickup.image_index, putdown_x,putdown_y, 1, 1, 0, c_lime, 0.3);
  }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
