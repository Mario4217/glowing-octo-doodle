<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>enum NW{
  server_welcome = 10,
  client_profile = 2,
  client_connect = 3,
  client_disconnect = 4,
  position = 5,
  map_data = 6,
  ent_action = 7,
  ent_position = 8,
  pawn_pickup = 9
}

globalvar nw_buffer;
nw_buffer = -1;

next_player_id = 1;
idmap = ds_map_create();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (is_network &amp;&amp; nw_is_connected){
  buffer_seek(nw_buffer, buffer_seek_start, 0);
  buffer_write(nw_buffer, buffer_u8, NW.position)
  if (is_server){
    buffer_write(nw_buffer, buffer_u8, 0);
  }
  buffer_write(nw_buffer, buffer_u16, obj_player_controller.player_pawn.x);
  buffer_write(nw_buffer, buffer_u16, obj_player_controller.player_pawn.y);
  
  nw_broadcast(nw_buffer);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///networking code
switch (async_load[? "type"]){
  case network_type_non_blocking_connect:
    if (async_load[? "succeeded"]){
      nw_is_connected = true;
      is_server = false;
      console_print("Connected to server!")
      nw_buffer = buffer_create(256, buffer_grow, 1);
      
      buffer_seek(nw_buffer, buffer_seek_start, 0);
      buffer_write(nw_buffer, buffer_u8, NW.server_welcome);
      network_send_packet(nw_socket, nw_buffer, buffer_get_size(nw_buffer));
      
      
      
    }else{
      console_print("Connection to server failed!",c_orange);
      nw_end();        
    }
  break;
  case network_type_connect:
    if (is_server){
      var socket = async_load[? "socket"];
      var player = nw_make_player(socket);
      player[? "id"] = next_player_id;
      player[? "nid"] = async_load[? "id"];
      
      ds_map_add_map(nw_players, next_player_id, player);
      
      console_print("Someone connected to the server!");
      
      idmap[? async_load[? "socket"]] = next_player_id;
      
      next_player_id ++;
    }
  break;
  case network_type_data:
    if (is_server){
      var nid = async_load[? "id"];
      var player = nw_players[? idmap[? nid]];
      if (player != undefined){
        nw_income_server(async_load[? "buffer"], player);
      }else{
        show_debug_message("Gnarf, a non existing player sends a message...");
      }
    }else{
      nw_income_client(async_load[? "buffer"]);
    }
  break;
  case network_type_disconnect:
    var map = nw_players[? idmap[? async_load[? "socket"]]];
    with (map[? "pawn"]){
      instance_destroy();
    }
    ds_map_delete(nw_players, idmap[? async_load[? "socket"]]);
    ds_map_delete(idmap, async_load[? "id"]);
    console_print("Someone disconnected from the server!")
  break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
