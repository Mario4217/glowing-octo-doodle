<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///language
lang_init();
lang_extern("language/english.txt");

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///bindings
bind_init();
bind_create("player_horizontal");
bind_create("player_vertical");
bind_create("menu");
bind_create("interact");
bind_create("putdown");

bind_add("menu", "K", vk_escape, 1);
bind_add("menu", "G", gp_start, 1);

bind_add("player_horizontal", "K", ord("D"), 1);
bind_add("player_horizontal", "K", ord("A"), -1);
bind_add("player_horizontal", "K", vk_right, 1);
bind_add("player_horizontal", "K", vk_left, -1);
bind_add("player_horizontal", "A", gp_axisrh);

bind_add("player_vertical", "K", ord("W"), -1);
bind_add("player_vertical", "K", ord("S"), 1);
bind_add("player_vertical", "K", vk_up, -1);
bind_add("player_vertical", "K", vk_down, 1);
bind_add("player_vertical", "A", gp_axisrv);

bind_add("interact", "M", mb_left);
bind_add("interact", "K", ord("E"));
bind_add("interact", "K", vk_rcontrol);
bind_add("interact", "G", gp_face1);

bind_add("putdown", "M", mb_right);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///console / settings
instance_create(0,0,obj_console);

globalvar settings_map;
settings_map = ds_map_create();
settings_map[? "aa"] = 0;
settings_map[? "vsync"] = 1;
settings_map[? "res_width"] = 1280;
settings_map[? "res_height"] = 720;
settings_map[? "fullscreen"] = 0;
settings_map[? "inner_deadzone"] = 10;
settings_map[? "outer_deadzone"] = 10;
settings_map[? "volume_music"] = 20;
settings_map[? "volume_sfx"] = 20;

settings_load();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Gameplay Objects

enum ATTRIBUTE {
  skin = 0,
  size = 1,
  width = 2,
  height = 3,
  orientation = 4,
  player_index = 5,
  map_index = 6,
  auto_test = 7,
  relative = 8,
  top = 9,
  left = 10,
  collision = 11
}

enum EVENT {
  onPress = 1,
  onRelease = 2,
  onSpawn = 3,
  onTrue = 4,
  onFalse = 5
}

enum ACTION{
  open = 1,
  close = 2,
  setA = 3,
  unsetA = 4,
  setB = 5,
  unsetB = 6,
  test = 7
}

globalvar dictionary_action, dictionary_attribute, dictionary_event;
dictionary_action = ds_map_create();
dictionary_action[? ACTION.open] = "{editor.action.open}";
dictionary_action[? ACTION.close] = "{editor.action.close}";
dictionary_action[? ACTION.setA] = "{editor.action.setA}";
dictionary_action[? ACTION.setB] = "{editor.action.setB}";
dictionary_action[? ACTION.unsetA] = "{editor.action.unsetA}";
dictionary_action[? ACTION.unsetB] = "{editor.action.unsetB}";
dictionary_action[? ACTION.test] = "{editor.action.test}";
dictionary_attribute = ds_map_create();
dictionary_attribute[? ATTRIBUTE.skin] = "{editor.attribute.skin}";
dictionary_attribute[? ATTRIBUTE.size] = "{editor.attribute.size}";
dictionary_attribute[? ATTRIBUTE.width] = "{editor.attribute.width}"
dictionary_attribute[? ATTRIBUTE.height] = "{editor.attribute.height}";
dictionary_attribute[? ATTRIBUTE.orientation] = "{editor.attribute.orientation}";
dictionary_attribute[? ATTRIBUTE.player_index] = "{editor.attribute.player_index}";
dictionary_attribute[? ATTRIBUTE.map_index] = "{editor.attribute.map_index}";
dictionary_attribute[? ATTRIBUTE.auto_test] = "{editor.attribute.auto_test}";
dictionary_attribute[? ATTRIBUTE.relative] = "{editor.attribute.relative}";
dictionary_attribute[? ATTRIBUTE.top] = "{editor.attribute.top}"
dictionary_attribute[? ATTRIBUTE.left] = "{editor.attribute.left}"
dictionary_attribute[? ATTRIBUTE.collision] = "{editor.attribute.collision}"
dictionary_event = ds_map_create();
dictionary_event[? EVENT.onPress] = "{editor.event.onPress}";
dictionary_event[? EVENT.onRelease] = "{editor.event.onRelease}";
dictionary_event[? EVENT.onSpawn] = "{editor.event.onSpawn}";
dictionary_event[? EVENT.onTrue] = "{editor.event.onTrue}";
dictionary_event[? EVENT.onFalse] = "{editor.event.onFalse}";


globalvar gp_objects, gp_editor; //a ds map with every gameplay object. (buttons, cubes, spawnpoint... entities)
gp_objects = ds_map_create();
gp_editor = ds_list_create();

register_gameplay_object(1,"{gp.floor_button}",obj_gp_floor_button);
gameplay_object_add_output(1, EVENT.onPress);
gameplay_object_add_output(1, EVENT.onRelease);
gameplay_object_set_depth_anchor(1,1);

register_gameplay_object(2,"{gp.spawn}",obj_gp_spawn);
gameplay_object_add_output(2, EVENT.onSpawn);
gameplay_object_add_attribute(2, ATTRIBUTE.player_index,0,buffer_u8,0,15);
gameplay_object_set_depth_anchor(2, 1);

register_gameplay_object(3,"{gp.wall}",obj_gp_wall);
gameplay_object_add_attribute(3,ATTRIBUTE.skin,0,buffer_u8,0,sprite_get_number(spr_gp_wall)-1);
gameplay_object_add_attribute(3,ATTRIBUTE.width,64,buffer_u16,16,1024);
gameplay_object_add_attribute(3,ATTRIBUTE.height,64,buffer_u16,64,1024);
gameplay_object_add_tag(3,"wall");
gameplay_object_add_tag(3,"clip");

register_gameplay_object(4, "{gp.light_gate}",obj_gp_light_wall);
//gameplay_object_add_attribute(4,ATTRIBUTE.skin,"skin",0,buffer_u8,0,sprite_get_number(spr_gp_light_wall)-1);
gameplay_object_add_attribute(4, ATTRIBUTE.orientation, 0, buffer_bool, 0, 1);
gameplay_object_add_attribute(4, ATTRIBUTE.size, 64, buffer_u16, 64, 256);
gameplay_object_add_input(4, ACTION.open);
gameplay_object_add_input(4, ACTION.close);
gameplay_object_add_tag(4, "clip");

register_gameplay_object(5, "{gp.a3}", obj_gp_cube);
gameplay_object_add_tag(5, "clip");
gameplay_object_make_pickup(5, 50);

register_gameplay_object(6, "{gp.goalzone}", obj_gp_goalzone);
gameplay_object_add_attribute(6, ATTRIBUTE.map_index, 1, buffer_u8, 0, 255);
gameplay_object_add_attribute(6, ATTRIBUTE.relative, 1, buffer_bool, 0, 1);

register_gameplay_object(7, "{gp.logic_or}", obj_gp_logic_or);
gameplay_object_add_input(7, ACTION.setA);
gameplay_object_add_input(7, ACTION.setB);
gameplay_object_add_input(7, ACTION.unsetA);
gameplay_object_add_input(7, ACTION.unsetB);
gameplay_object_add_input(7, ACTION.test);
gameplay_object_add_output(7, EVENT.onFalse);
gameplay_object_add_output(7, EVENT.onTrue);
gameplay_object_add_attribute(7, ATTRIBUTE.auto_test, 0, buffer_bool, 0, 1);

register_gameplay_object(8, "{gp.logic_and}", obj_gp_logic_and);
gameplay_object_add_input(8, ACTION.setA);
gameplay_object_add_input(8, ACTION.setB);
gameplay_object_add_input(8, ACTION.unsetA);
gameplay_object_add_input(8, ACTION.unsetB);
gameplay_object_add_input(8, ACTION.test);
gameplay_object_add_output(8, EVENT.onFalse);
gameplay_object_add_output(8, EVENT.onTrue);
gameplay_object_add_attribute(8, ATTRIBUTE.auto_test, 0, buffer_bool, 0, 1);

register_gameplay_object(9, "{gp.tile}", obj_gp_tile);
gameplay_object_add_attribute(9, ATTRIBUTE.skin, 0, buffer_u8, 0, 1);
gameplay_object_add_attribute(9, ATTRIBUTE.width, 32, buffer_u16, 0, 1024);
gameplay_object_add_attribute(9, ATTRIBUTE.height, 32, buffer_u16, 0, 1024);
gameplay_object_add_attribute(9, ATTRIBUTE.top, 0, buffer_u16, 0, 1024);
gameplay_object_add_attribute(9, ATTRIBUTE.left, 0, buffer_u16, 0, 1024);
gameplay_object_add_attribute(9, ATTRIBUTE.collision, 0, buffer_bool, 0, 1);

//make the objects in the ingame editor accsesable
ds_list_add(gp_editor, 2, 1, 3, 4, 5, 6, 7, 8);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///profile
globalvar profile_map;

ini_open('profile.ini')

profile_map = ds_map_create();
profile_map[? "red"] = ini_read_real("color", "red",255);
profile_map[? "green"] = ini_read_real("color", "green",0);
profile_map[? "blue"] = ini_read_real("color", "blue", 0);
profile_map[? "name"] = ini_read_string("player","name","player");

ini_close();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///other stuff
instance_create(0,0,obj_menu);
instance_create(0,0,obj_time_control);

globalvar is_server, in_network;
in_network = false;
is_server = true;

globalvar camera, testmode;
camera = instance_create(0,0,obj_camera);
testmode = ""; //if not empty than map name

globalvar particle_map;
particle_map = ds_map_create();

var par = part_type_create();
particle_map[? "spawn"] = par;
part_type_life(par, 80, 90);
part_type_gravity(par,0.02,270);
part_type_scale(par,0.02,0.1);
part_type_shape(par, pt_shape_circle);
part_type_alpha2(par, 1,0);

var par = part_type_create();
particle_map[? "lightwall"] = par;
part_type_life(par, 30, 60);
part_type_scale(par, 0.1, 0.1);
part_type_shape(par, pt_shape_circle);
part_type_alpha2(par, 1,0);
part_type_size(par, 1,1,-0.01,0.01);
part_type_color2(par, c_aqua, c_white);

globalvar map_list, pack_list;
map_list = ds_list_create();
pack_list = ds_list_create();

globalvar current_pack;
current_pack = -1;

globalvar floorlist;
floorlist[0,0] = background_get_texture(bg_floor_grass);
floorlist[0,1] = background_get_width(bg_floor_grass);
floorlist[0,2] = background_get_height(bg_floor_grass);
floorlist[0,3] = "{editor.floor.grass}"
floorlist[1,0] = background_get_texture(bg_floor_concrete);
floorlist[1,1] = background_get_width(bg_floor_concrete);
floorlist[1,2] = background_get_height(bg_floor_concrete);
floorlist[1,3] = "{editor.floor.concrete}"

global.toLoad = "title";
room = rm_game;

globalvar sun_direction, sun_length, sun_intensity;
sun_direction = 45;
sun_length = 1;
sun_intensity = 0.8;

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
