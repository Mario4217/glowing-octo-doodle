<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>enum ATTRIBUTE {
  skin = 0,
  size = 1,
  width = 2,
  height = 3,
  orientation = 4,
  player_index = 5
}

lang_init();
lang_extern("language/english.txt");

bind_init();
bind_create("player_horizontal");
bind_create("player_vertical");
bind_create("menu");
bind_create("interact");

bind_add("menu", "K", vk_escape, 1);
bind_add("menu", "G", gp_start, 1);

bind_add("player_horizontal", "K", ord("D"), 1);
bind_add("player_horizontal", "K", ord("A"), -1);
bind_add("player_horizontal", "K", vk_right, 1);
bind_add("player_horizontal", "K", vk_left, -1);
bind_add("player_horizontal", "A", gp_axisrh);

bind_add("player_vertical", "K", ord("W"), -1);
bind_add("player_vertical", "K", ord("S"), 1);
bind_add("player_vertical", "K", vk_up, -1);
bind_add("player_vertical", "K", vk_down, 1);
bind_add("player_vertical", "A", gp_axisrv);

bind_add("interact", "K", ord("E"));
bind_add("interact", "K", vk_rcontrol);
bind_add("interact", "M", 0);
bind_add("interact", "G", gp_face1);

instance_create(0,0,obj_console);

globalvar settings_map;
settings_map = ds_map_create();
settings_map[? "aa"] = 0;
settings_map[? "vsync"] = 1;
settings_map[? "res_width"] = 1280;
settings_map[? "res_height"] = 720;
settings_map[? "fullscreen"] = 0;
settings_map[? "inner_deadzone"] = 10;
settings_map[? "outer_deadzone"] = 10;
settings_map[? "volume_music"] = 20;
settings_map[? "volume_sfx"] = 20;

settings_load();

globalvar gp_objects, gp_editor; //a ds map with every gameplay object. (buttons, cubes, spawnpoint... entities)
gp_objects = ds_map_create();
gp_editor = ds_list_create();

register_gameplay_object(1,"{gp.floor_button}",obj_gp_floor_button);
gameplay_object_add_output(1, "onPress");
gameplay_object_add_output(1, "onRelease");
gameplay_object_set_depth_anchor(1,1);

register_gameplay_object(2,"{gp.spawn}",obj_gp_spawn);
gameplay_object_add_output(2, "onSpawn");
gameplay_object_add_attribute(2, ATTRIBUTE.player_index, "player_index",0,buffer_u8,0,15);
gameplay_object_set_depth_anchor(2, 1);

register_gameplay_object(3,"{gp.wall}",obj_gp_wall);
gameplay_object_add_attribute(3,ATTRIBUTE.skin,"skin",0,buffer_u8,0,sprite_get_number(spr_gp_wall)-1);
gameplay_object_add_attribute(3,ATTRIBUTE.width,"width",64,buffer_u16,16,1024);
gameplay_object_add_attribute(3,ATTRIBUTE.height,"height",64,buffer_u16,64,1024);
gameplay_object_add_tag(3,"wall");

register_gameplay_object(4,"{gp.wall}",obj_gp_light_wall);
//gameplay_object_add_attribute(4,ATTRIBUTE.skin,"skin",0,buffer_u8,0,sprite_get_number(spr_gp_light_wall)-1);
gameplay_object_add_attribute(4,ATTRIBUTE.orientation,"orientation",0,buffer_bool,0,1);
gameplay_object_add_attribute(4,ATTRIBUTE.size,"size",64,buffer_u16,64,256);
gameplay_object_add_input(4,"open");
gameplay_object_add_input(4,"close");

ds_list_add(gp_editor, 2, 1, 3, 4);

instance_create(0,0,obj_menu);
instance_create(0,0,obj_time_control);

globalvar is_server, in_network;
in_network = false;
is_server = true;

globalvar camera, testmode;
camera = instance_create(0,0,obj_camera);
testmode = ""; //if not empty than map name

globalvar particle_map;
particle_map = ds_map_create();
var par = part_type_create();
particle_map[? "spawn"] = par;
part_type_life(par, 80, 90);
part_type_gravity(par,0.02,270);
part_type_scale(par,0.02,0.1);
part_type_shape(par, pt_shape_circle);
part_type_alpha2(par, 1,0);

global.toLoad = "";
room = rm_game;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
