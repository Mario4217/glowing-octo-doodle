<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///release mode
//gml_release_mode(true);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///language
lang_init();
lang_extern("language/english.txt");
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///bindings
bind_init();
bind_create("player_horizontal");
bind_create("player_vertical");
bind_create("menu");
bind_create("interact");
bind_create("putdown");
bind_create("player_swap");

bind_add("menu", "K", vk_escape, 1);
bind_add("menu", "G", gp_start, 1);

bind_add("player_horizontal", "K", ord("D"), 1);
bind_add("player_horizontal", "K", ord("A"), -1);
bind_add("player_horizontal", "K", vk_right, 1);
bind_add("player_horizontal", "K", vk_left, -1);
bind_add("player_horizontal", "A", gp_axislh);

bind_add("player_vertical", "K", ord("W"), -1);
bind_add("player_vertical", "K", ord("S"), 1);
bind_add("player_vertical", "K", vk_up, -1);
bind_add("player_vertical", "K", vk_down, 1);
bind_add("player_vertical", "A", gp_axislv);

bind_add("interact", "M", mb_left);
bind_add("interact", "K", ord("E"));
bind_add("interact", "K", vk_rcontrol);
bind_add("interact", "G", gp_face1);

bind_add("player_swap", "K", vk_tab);
bind_add("player_swap","G", gp_face3);

bind_add("putdown", "M", mb_right);
bind_add("putdown", "G", gp_face2);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///console / settings
instance_create(0,0,obj_console);

globalvar settings_map;
settings_map = ds_map_create();
settings_map[? "aa"] = 0;
settings_map[? "vsync"] = 1;
settings_map[? "res_width"] = 1280;
settings_map[? "res_height"] = 720;
settings_map[? "fullscreen"] = 0;
settings_map[? "inner_deadzone"] = 10;
settings_map[? "outer_deadzone"] = 10;
settings_map[? "volume_music"] = 20;
settings_map[? "volume_sfx"] = 20;

settings_load();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Gameplay Objects

enum ATTRIBUTE {
  skin = 0,
  size = 1,
  width = 2,
  height = 3,
  orientation = 4,
  player_index = 5,
  map_index = 6,
  auto_test = 7,
  relative = 8,
  top = 9,
  left = 10,
  collision = 11,
  time = 12,
  start_active = 13,
  spd = 14,
  milliseconds = 15,
  text = 16,
  title = 17,
  reset = 18,
}

enum EVENT {
  onPress = 1,
  onRelease = 2,
  onSpawn = 3,
  onTrue = 4,
  onFalse = 5,
  onTrigger = 6,
  onEndOfRail = 7,
  onDelay = 8,
  onDetect = 9,
  onUndetect = 10,
  onNext = 11,
  onStartTouch = 12,
  onEndTouch = 13,
  onFirst = 14,
  onNotFirst = 15,
  onState1 = 16,
  onState2 = 17
}

enum ACTION{
  open = 1,
  close = 2,
  setA = 3,
  unsetA = 4,
  setB = 5,
  unsetB = 6,
  test = 7,
  trigger = 8,
  goRight = 9,
  goLeft = 10,
  goUp = 11,
  goDown = 12,
  stop = 13,
  reverse = 14,
  start = 15,
  pause = 16,
  reset = 17,
  unpause = 18,
  show = 19,
  state1 = 20,
  state2 = 21
}

globalvar dictionary_action, dictionary_attribute, dictionary_event;
dictionary_action = ds_map_create();
dictionary_action[? ACTION.open] = "{editor.action.open}";
dictionary_action[? ACTION.close] = "{editor.action.close}";
dictionary_action[? ACTION.setA] = "{editor.action.setA}";
dictionary_action[? ACTION.setB] = "{editor.action.setB}";
dictionary_action[? ACTION.unsetA] = "{editor.action.unsetA}";
dictionary_action[? ACTION.unsetB] = "{editor.action.unsetB}";
dictionary_action[? ACTION.test] = "{editor.action.test}";
dictionary_action[? ACTION.trigger] = "{editor.action.trigger}";
dictionary_action[? ACTION.goUp] = "{editor.action.goUp}";
dictionary_action[? ACTION.goDown] = "{editor.action.goDown}";
dictionary_action[? ACTION.goRight] = "{editor.action.goRight}";
dictionary_action[? ACTION.goLeft] = "{editor.action.goLeft}";
dictionary_action[? ACTION.stop] = "{editor.action.stop}";
dictionary_action[? ACTION.reverse] = "{editor.action.reverse}";
dictionary_action[? ACTION.start] = "{editor.action.start}";
dictionary_action[? ACTION.pause] = "{editor.action.pause}";
dictionary_action[? ACTION.reset] = "{editor.action.reset}";
dictionary_action[? ACTION.unpause] = "{editor.action.unpause}";
dictionary_action[? ACTION.show] = "{editor.action.show}";
dictionary_action[? ACTION.reset] = "{editor.action.reset}";
dictionary_action[? ACTION.state1] = "{editor.action.state1}";
dictionary_action[? ACTION.state2] = "{editor.action.state2}";
dictionary_attribute = ds_map_create();
dictionary_attribute[? ATTRIBUTE.skin] = "{editor.attribute.skin}";
dictionary_attribute[? ATTRIBUTE.size] = "{editor.attribute.size}";
dictionary_attribute[? ATTRIBUTE.width] = "{editor.attribute.width}"
dictionary_attribute[? ATTRIBUTE.height] = "{editor.attribute.height}";
dictionary_attribute[? ATTRIBUTE.orientation] = "{editor.attribute.orientation}";
dictionary_attribute[? ATTRIBUTE.player_index] = "{editor.attribute.player_index}";
dictionary_attribute[? ATTRIBUTE.map_index] = "{editor.attribute.map_index}";
dictionary_attribute[? ATTRIBUTE.auto_test] = "{editor.attribute.auto_test}";
dictionary_attribute[? ATTRIBUTE.relative] = "{editor.attribute.relative}";
dictionary_attribute[? ATTRIBUTE.top] = "{editor.attribute.top}";
dictionary_attribute[? ATTRIBUTE.left] = "{editor.attribute.left}";
dictionary_attribute[? ATTRIBUTE.collision] = "{editor.attribute.collision}";
dictionary_attribute[? ATTRIBUTE.time] = "{editor.attribute.time}";
dictionary_attribute[? ATTRIBUTE.start_active] = "{editor.attribute.start_active}";
dictionary_attribute[? ATTRIBUTE.spd] = "{editor.attribute.speed}";
dictionary_attribute[? ATTRIBUTE.milliseconds] = "{editor.attribute.milliseconds}";
dictionary_attribute[? ATTRIBUTE.text] = "{editor.attribute.text}";
dictionary_attribute[? ATTRIBUTE.title] = "{editor.attribute.title}";
dictionary_event = ds_map_create();
dictionary_event[? EVENT.onPress] = "{editor.event.onPress}";
dictionary_event[? EVENT.onRelease] = "{editor.event.onRelease}";
dictionary_event[? EVENT.onSpawn] = "{editor.event.onSpawn}";
dictionary_event[? EVENT.onTrue] = "{editor.event.onTrue}";
dictionary_event[? EVENT.onFalse] = "{editor.event.onFalse}";
dictionary_event[? EVENT.onTrigger] = "{editor.event.onTrigger}";
dictionary_event[? EVENT.onEndOfRail] = "{editor.event.onEndOfRail}";
dictionary_event[? EVENT.onDelay] = "{editor.event.onDelay}";
dictionary_event[? EVENT.onDetect] = "{editor.event.onDetect}";
dictionary_event[? EVENT.onUndetect] = "{editor.event.onUndetect}";
dictionary_event[? EVENT.onNext] = "{editor.event.onNext}";
dictionary_event[? EVENT.onStartTouch] = "{editor.event.onStartTouch}";
dictionary_event[? EVENT.onEndTouch] = "{editor.event.onEndTouch}";
dictionary_event[? EVENT.onFirst] = "{editor.event.onFirst}";
dictionary_event[? EVENT.onNotFirst] = "{editor.event.onNotFirst}";
dictionary_event[? EVENT.onState1] = "{editor.event.onState1}";
dictionary_event[? EVENT.onState2] = "{editor.event.onState2}";

globalvar gp_objects, gp_editor; //a ds map with every gameplay object. (buttons, cubes, spawnpoint... entities)
gp_objects = ds_map_create();
gp_editor = ds_list_create();

register_gameplay_object(1,"{gp.floor_button}",obj_gp_floor_button);
gameplay_object_add_output(1, EVENT.onPress);
gameplay_object_add_output(1, EVENT.onRelease);
gameplay_object_set_depth_anchor(1,1);

register_gameplay_object(2,"{gp.spawn}",obj_gp_spawn);
gameplay_object_add_output(2, EVENT.onSpawn);
gameplay_object_add_attribute(2, ATTRIBUTE.player_index,0,buffer_u8,0,15);
gameplay_object_set_depth_anchor(2, 1);

register_gameplay_object(3,"{gp.wall}",obj_gp_wall);
gameplay_object_add_attribute(3,ATTRIBUTE.skin,0,buffer_u8,0,sprite_get_number(spr_gp_wall)-1);
gameplay_object_add_attribute(3,ATTRIBUTE.width,64,buffer_u16,16,1024);
gameplay_object_add_attribute(3,ATTRIBUTE.height,64,buffer_u16,64,1024);
gameplay_object_add_tag(3,"wall");
gameplay_object_add_tag(3,"clip");

register_gameplay_object(4, "{gp.light_gate}",obj_gp_light_wall);
gameplay_object_add_attribute(4, ATTRIBUTE.orientation, 0, buffer_bool, 0, 1);
gameplay_object_add_attribute(4, ATTRIBUTE.size, 64, buffer_u16, 64, 1024);
gameplay_object_add_attribute(4, ATTRIBUTE.start_active, 1, buffer_bool, 0, 1);
gameplay_object_add_input(4, ACTION.open);
gameplay_object_add_input(4, ACTION.close);
gameplay_object_add_tag(4, "clip");

register_gameplay_object(5, "{gp.a3}", obj_gp_cube);
gameplay_object_add_tag(5, "clip");
gameplay_object_make_pickup(5, 50);

register_gameplay_object(6, "{gp.goalzone}", obj_gp_goalzone);
gameplay_object_add_attribute(6, ATTRIBUTE.map_index, 1, buffer_u8, 0, 255);
gameplay_object_add_attribute(6, ATTRIBUTE.relative, 1, buffer_bool, 0, 1);
gameplay_object_set_depth_anchor(6, 1);

register_gameplay_object(7, "{gp.logic_or}", obj_gp_logic_or);
gameplay_object_add_input(7, ACTION.setA);
gameplay_object_add_input(7, ACTION.setB);
gameplay_object_add_input(7, ACTION.unsetA);
gameplay_object_add_input(7, ACTION.unsetB);
gameplay_object_add_input(7, ACTION.test);
gameplay_object_add_output(7, EVENT.onFalse);
gameplay_object_add_output(7, EVENT.onTrue);
gameplay_object_add_attribute(7, ATTRIBUTE.auto_test, 1, buffer_bool, 0, 1);

register_gameplay_object(8, "{gp.logic_and}", obj_gp_logic_and);
gameplay_object_add_input(8, ACTION.setA);
gameplay_object_add_input(8, ACTION.setB);
gameplay_object_add_input(8, ACTION.unsetA);
gameplay_object_add_input(8, ACTION.unsetB);
gameplay_object_add_input(8, ACTION.test);
gameplay_object_add_output(8, EVENT.onFalse);
gameplay_object_add_output(8, EVENT.onTrue);
gameplay_object_add_attribute(8, ATTRIBUTE.auto_test, 1, buffer_bool, 0, 1);

register_gameplay_object(9, "{gp.tile}", obj_gp_tile);
gameplay_object_add_attribute(9, ATTRIBUTE.skin, 0, buffer_u8, 0, 1);
gameplay_object_add_attribute(9, ATTRIBUTE.width, 32, buffer_u16, 0, 1024);
gameplay_object_add_attribute(9, ATTRIBUTE.height, 32, buffer_u16, 0, 1024);
gameplay_object_add_attribute(9, ATTRIBUTE.top, 0, buffer_u16, 0, 1024);
gameplay_object_add_attribute(9, ATTRIBUTE.left, 0, buffer_u16, 0, 1024);
gameplay_object_add_attribute(9, ATTRIBUTE.collision, 0, buffer_bool, 0, 1);

register_gameplay_object(10, "{gp.button}", obj_gp_button);
gameplay_object_add_attribute(10, ATTRIBUTE.time, 1, buffer_u8, 0, 255);
gameplay_object_add_output(10, EVENT.onPress);
gameplay_object_add_output(10, EVENT.onRelease);
gameplay_object_add_tag(10,"interact");

register_gameplay_object(11, "{gp.logic_relay}", obj_gp_logic_relay);
gameplay_object_add_input(11, ACTION.trigger);
gameplay_object_add_output(11, EVENT.onTrigger);

register_gameplay_object(12,"{gp.rail}", obj_gp_rail);
gameplay_object_add_attribute(12, ATTRIBUTE.orientation, 0, buffer_bool, 0, 1);
gameplay_object_add_attribute(12, ATTRIBUTE.size, 64, buffer_u16, 32, 1024);
gameplay_object_set_depth_anchor(12, 2);

register_gameplay_object(13, "{gp.cart}", obj_gp_cart);
gameplay_object_add_attribute(13, ATTRIBUTE.spd, 100, buffer_u16, 0, 500);
gameplay_object_add_input(13, ACTION.goUp);
gameplay_object_add_input(13, ACTION.goDown);
gameplay_object_add_input(13, ACTION.goRight);
gameplay_object_add_input(13, ACTION.goLeft);
gameplay_object_add_input(13, ACTION.stop);
gameplay_object_add_input(13, ACTION.reverse);
gameplay_object_add_output(13, EVENT.onEndOfRail);
gameplay_object_add_tag(13,"clip");
gameplay_object_add_tag(13,"carrier");

register_gameplay_object(14, "{gp.logic_delay}", obj_gp_logic_delay);
gameplay_object_add_attribute(14, ATTRIBUTE.milliseconds, 1000, buffer_u32, 0, 4294967295);
gameplay_object_add_input(14, ACTION.pause);
gameplay_object_add_input(14, ACTION.unpause);
gameplay_object_add_input(14, ACTION.start);
gameplay_object_add_input(14, ACTION.reset);
gameplay_object_add_output(14, EVENT.onDelay);

register_gameplay_object(15, "{gp.carry_blocker}",obj_gp_carry_blocker);
gameplay_object_add_attribute(15, ATTRIBUTE.orientation, 0, buffer_bool, 0, 1);
gameplay_object_add_attribute(15, ATTRIBUTE.size, 64, buffer_u16, 64, 1024);
gameplay_object_add_attribute(15, ATTRIBUTE.start_active, 1, buffer_bool, 0, 1);
gameplay_object_add_input(15, ACTION.open);
gameplay_object_add_input(15, ACTION.close);
gameplay_object_add_tag(15, "clip");

register_gameplay_object(16, "{gp.rail_detector}", obj_gp_rail_detector);
gameplay_object_set_depth_anchor(12, 3); //bottom - layer 2
gameplay_object_add_output(16, EVENT.onDetect);
gameplay_object_add_output(16, EVENT.onUndetect);

register_gameplay_object(17, "{gp.story_message}", obj_gp_message);
gameplay_object_add_attribute(17, ATTRIBUTE.text, "", buffer_string, 0, 256);
gameplay_object_add_attribute(17, ATTRIBUTE.title, "", buffer_string, 0, 256);
gameplay_object_add_input(17, ACTION.show);
gameplay_object_add_output(17, EVENT.onNext);

register_gameplay_object(18, "{gp.trigger_zone}", obj_gp_trigger);
gameplay_object_add_attribute(18, ATTRIBUTE.width, 64, buffer_u16, 0, 1024);
gameplay_object_add_attribute(18, ATTRIBUTE.height, 64, buffer_u16, 0, 1024);
gameplay_object_add_output(18, EVENT.onStartTouch);
gameplay_object_add_output(18, EVENT.onEndTouch);

register_gameplay_object(19, "{gp.logic_memory}", obj_gp_logic_memory);
gameplay_object_add_output(19, EVENT.onFirst);
gameplay_object_add_output(19, EVENT.onNotFirst);
gameplay_object_add_input(19, ACTION.trigger);

register_gameplay_object(20, "{gp.lever}", obj_gp_lever);
gameplay_object_add_output(20, EVENT.onState1);
gameplay_object_add_output(20, EVENT.onState2);
gameplay_object_add_input(20, ACTION.state1);
gameplay_object_add_input(20, ACTION.state2);

//make the objects in the ingame editor accesesable
ds_list_add(gp_editor, "{editor.group.general}", 2, 6, 1, 10, 20, 5, 4, 3, 15);
ds_list_add(gp_editor, "{editor.group.rails}", 12, 13, 16);
ds_list_add(gp_editor, "{editor.group.laser}");
ds_list_add(gp_editor, "{editor.group.logic}", 7, 8, 11, 14, 19);
ds_list_add(gp_editor, "{editor.group.story}", 17, 18);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///profile
globalvar profile_map;

ini_open('profile.ini')

profile_map = ds_map_create();
profile_map[? "red"] = ini_read_real("color", "red",255);
profile_map[? "green"] = ini_read_real("color", "green",0);
profile_map[? "blue"] = ini_read_real("color", "blue", 0);
profile_map[? "name"] = ini_read_string("player","name","player");
profile_map[? "socket"] = -1;
profile_map[? "id"] = 0;
profile_map[? "color"] = make_color_rgb(profile_map[? "red"], profile_map[? "green"], profile_map[? "blue"]);
profile_map[? "loaded"] = true;

ini_close();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///other stuff
instance_create(0,0,obj_menu);
instance_create(0,0,obj_time_control);

globalvar camera, testmode;
camera = instance_create(0,0,obj_camera);
testmode = ""; //if not empty than map name

globalvar particle_map;
particle_map = ds_map_create();

var par = part_type_create();
particle_map[? "spawn"] = par;
part_type_life(par, 80, 90);
part_type_gravity(par,0.02,270);
part_type_scale(par,0.02,0.1);
part_type_shape(par, pt_shape_circle);
part_type_alpha2(par, 1,0);

var par = part_type_create();
particle_map[? "lightwall"] = par;
part_type_life(par, 30, 60);
part_type_scale(par, 0.1, 0.1);
part_type_shape(par, pt_shape_circle);
part_type_alpha2(par, 1,0);
part_type_size(par, 1,1,-0.01,0.01);
part_type_color2(par, c_aqua, c_white);

globalvar map_list, pack_list;
map_list = ds_list_create();
pack_list = ds_list_create();

globalvar current_pack;
current_pack = -1;

globalvar floorlist;
floorlist[0,0] = background_get_texture(bg_floor_grass);
floorlist[0,1] = background_get_width(bg_floor_grass);
floorlist[0,2] = background_get_height(bg_floor_grass);
floorlist[0,3] = "{editor.floor.grass}"
floorlist[1,0] = background_get_texture(bg_floor_concrete);
floorlist[1,1] = background_get_width(bg_floor_concrete);
floorlist[1,2] = background_get_height(bg_floor_concrete);
floorlist[1,3] = "{editor.floor.concrete}"
floorlist[2,0] = background_get_texture(bg_floor_darkness);
floorlist[2,1] = background_get_width(bg_floor_darkness);
floorlist[2,2] = background_get_height(bg_floor_darkness);
floorlist[2,3] = "{editor.floor.darkness}";
floorlist[3,0] = background_get_texture(bg_floor_spaceship);
floorlist[3,1] = background_get_width(bg_floor_spaceship);
floorlist[3,2] = background_get_height(bg_floor_spaceship);
floorlist[3,3] = "{editor.floor.spaceship}";

global.toLoad = "title";
global.current_map_path = "";
room = rm_game;

globalvar sun_direction, sun_length, sun_intensity;
sun_direction = 45;
sun_length = 1;
sun_intensity = 0.8;

globalvar is_server, is_network, nw_type, nw_port, nw_server, nw_socket, nw_is_connected, nw_own_id;
is_network = false;
is_server = true;
nw_type = "TCP";
nw_port = 24019;
nw_server = -1;
nw_socket = -1;
nw_is_connected = false;
nw_own_id = 0;

network_set_config(network_config_use_non_blocking_socket, 1);
network_set_config(network_config_connect_timeout, 1000);

globalvar nw_players;
nw_players = ds_map_create();
nw_players[? 0] = profile_map;

globalvar allow_cheats, cheat_noclip;
allow_cheats = true;
cheat_noclip = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
