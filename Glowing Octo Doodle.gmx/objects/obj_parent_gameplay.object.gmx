<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>attr = ds_map_create();
overwrite_attr = ds_map_create();
outputs = ds_list_create();
input = ds_map_create();
gp_object_index = -1;
init = false;
alarm[0] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for (i=0; i&lt;ds_list_size(outputs); i+=1){
  ds_map_destroy(outputs[| i]);
};
ds_list_destroy(outputs);
ds_map_destroy(attr);
ds_map_destroy(input);

if (init){
  if (gameplay_object_have_tag(src_map[? "id"],"clip")){
    with (clip){
      instance_destroy();
    }
  }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var map = gp_objects[? gp_obj_index];
src_map = map;
image_index = 0;
image_speed = 0;
var attr_map = map[? "attr"];

var key = ds_map_find_first(attr_map);
for (var i=0; i&lt;ds_map_size(attr_map); i+=1){
   var src_attr = attr_map[? key];
   attr[? key] = src_attr[? "default"];
   key = ds_map_find_next(attr_map,key);
};

if (ds_map_size(overwrite_attr) &gt; 0){
  var key = ds_map_find_first(overwrite_attr);
  for (var i=0; i&lt;ds_map_size(overwrite_attr); i+=1){
    attr[? key] = overwrite_attr[? key];
    var key = ds_map_find_next(overwrite_attr, key);
  };
}

if (attr[? ATTRIBUTE.skin] != undefined){
  image_index = attr[? ATTRIBUTE.skin];
}

if (gameplay_object_have_tag(src_map[? "id"],"clip")){
  clip = instance_create(x-sprite_xoffset,y-sprite_yoffset,obj_clip);
  if (attr[? ATTRIBUTE.width] != undefined){
    clip.image_xscale = attr[? ATTRIBUTE.width]/32;
  }
  if (attr[? ATTRIBUTE.height] != undefined){
    clip.image_yscale = attr[? ATTRIBUTE.height]/32;
  }
}

ds_map_destroy(overwrite_attr);

init = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (init){
  if (src_map[? "yanchor"] == 0){
    depth = obj_world.world_height*32 - bbox_bottom;
  }else{
    depth = obj_world.world_height*32 - bbox_top;
  }

  var pawn = obj_player_controller.player_pawn; //own pawn of the current player you are controlling
  
  if ((gameplay_object_have_tag(src_map[? "id"],"interact") || gameplay_object_have_tag(src_map[? "id"],"pickup") &amp;&amp; obj_player_controller.is_using_gamepad)){
    var dist = point_distance(x, y, pawn.center_x, pawn.center_y);
    if (dist &lt; obj_player_controller.pickup_distance){
      var angle = point_direction(x, y, pawn.center_x, pawn.center_y);
      if (
        (pawn.dir == 2 &amp;&amp; (angle &lt; 45  || angle &gt; 315)) ||
        (pawn.dir == 3 &amp;&amp; (angle &gt; 45  &amp;&amp; angle &lt; 135)) ||
        (pawn.dir == 0 &amp;&amp; (angle &gt; 135 &amp;&amp; angle &lt; 225)) ||
        (pawn.dir == 1 &amp;&amp; (angle &gt; 225 &amp;&amp; angle &lt; 315))
      ){
        if (obj_player_controller.interact_inst != -1){
          var cur = obj_player_controller.interact_inst;
          if (dist &lt; point_distance(pawn.center_x, pawn.center_y, cur.x, cur.y)){
            obj_player_controller.interact_inst = id;
          }
        }else{
          obj_player_controller.interact_inst = id;
        }
      }
    }
  }

  if ((mouse_over(bbox_left, bbox_top, bbox_right, bbox_bottom) || obj_player_controller.interact_inst == id) &amp;&amp; bind_check_pressed('interact') &amp;&amp; point_distance(x, y, pawn.center_x, pawn.center_y) &lt; obj_player_controller.pickup_distance &amp;&amp; pawn.pickup == -1){
    if (is_server){
      event_perform(ev_other, ev_user1);
    }
    if (is_network){
      buffer_seek(nw_buffer, buffer_seek_start, 0);
      buffer_write(nw_buffer, buffer_u8, NW.interact);
      buffer_write(nw_buffer, buffer_u16, index);
      nw_broadcast(nw_buffer);
    }
    if (gameplay_object_have_tag(src_map[? "id"], "pickup")){
      gp_pickup(id, pawn);
      if (is_network){
        buffer_seek(nw_buffer, buffer_seek_start, 0);
        buffer_write(nw_buffer, buffer_u8, NW.pawn_pickup)
        if (is_server){
          buffer_write(nw_buffer, buffer_u8, 0);
        }
        buffer_write(nw_buffer, buffer_u16, index);
        nw_broadcast(nw_buffer);
      }
    }
  }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///on interact
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///on input -&gt; action
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
