<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>zoom = 1;
tzoom = 1;
drag = false;
drag_x = 0;
drag_y = 0;
x = room_width / 2;
y = room_height / 2;

place_x = 0;
place_y = 0;

interface[? "editor_menu"] = "0";
interface[? "editor_error"] = "";

editor_container = ui_create_container(0,0,1,1);
topbar = ui_add_child(editor_container, ui_create_label(0,0,1,0.05,""));
ui_set_event(topbar,"onchange","set editor_menu !value");

menu_is_open = 0;
menu_container = ui_add_child(editor_container, ui_create_label(-0.3,0.05,-0.1,1,""));
btn_save = ui_add_child(menu_container, ui_create_button(0,0.1,1,0.15,"{editor.save}","editor_save"));
btn_exit = ui_add_child(menu_container, ui_create_button(0,0.9,1,0.95,"{editor.exit}","editor_exit"));
btn_exit[? "gp_port"] = -1;

rad_t1 = ui_add_child(topbar, ui_create_radio(0,0,0.2,1,"{editor.map}",1));
rad_t2 = ui_add_child(topbar, ui_create_radio(0.2,0,0.4,1,"{editor.objects}",2));
rad_t3 = ui_add_child(topbar, ui_create_radio(0.4,0,0.6,1,"{editor.tiles}",3));
rad_t4 = ui_add_child(topbar, ui_create_radio(0.6,0,0.8,1,"{editor.floor}",4));
rad_t5 = ui_add_child(topbar, ui_create_button(0.9,0,1,1,"{editor.test}","editor_test"));
rad_t1[? "gp_right"] = rad_t2;
rad_t2[? "gp_right"] = rad_t3;
rad_t3[? "gp_right"] = rad_t4;
rad_t4[? "gp_right"] = rad_t5;
rad_t5[? "gp_right"] = rad_t1;
rad_t1[? "gp_left"] = rad_t5;
rad_t2[? "gp_left"] = rad_t1;
rad_t3[? "gp_left"] = rad_t2;
rad_t4[? "gp_left"] = rad_t3;
rad_t5[? "gp_left"] = rad_t4;

ui_gamepad_position = rad_t1;

objects_container = ui_create_label(0.8,0.05,1,1,"{editor.objects}");
tiles_container = ui_create_label(0.8,0.05,1,1,"{editor.tiles}");
maps_container = ui_create_label(0.7,0.05,1,1,"{editor.map}");
floors_container = ui_create_label(0.8,0.05,1,1,"{editor.floors}");

ui_set_value(objects_container,-1);
ui_set_value(floors_container,-1);

ui_set_class(objects_container,"editor-panel");
ui_set_class(tiles_container,"editor-panel");
ui_set_class(maps_container,"editor-panel");
ui_set_class(floors_container,"editor-panel");

ui_add_child(editor_container, objects_container);
ui_add_child(editor_container, tiles_container);
ui_add_child(editor_container, maps_container);
ui_add_child(editor_container, floors_container);

//map panel
ui_add_child(maps_container, ui_create_label(0,0.1,1,0.15,"{editor.map.name}"));
input_name = ui_add_child(maps_container, ui_create_textbox(0,0.15,1,0.2,64,"",false));
input_width = ui_add_child(maps_container, ui_create_slider(0,0.2,1,0.25,"{editor.map.width}",32,512,32));
input_height = ui_add_child(maps_container, ui_create_slider(0,0.25,1,0.3,"{editor.map.height}",32,512,32));
input_players = ui_add_child(maps_container, ui_create_slider(0,0.3,1,0.35,"{editor.map.players}",1,16,1));
ui_set_event(input_name,"onchange","editor_update");
ui_set_event(input_width,"onchange","editor_update");
ui_set_event(input_height,"onchange","editor_update");
ui_set_event(input_players,"onchange","editor_update");

//error popup thing
error = ui_create_button(0.3,0.3,0.7,0.7,"",'set editor_error ""');
ui_set_class(error, "editor-error");
ui_add_child(editor_container, error);

//entity stat/setting panel
ent_label = ui_create_draggable(0.7,0.7,1,1,"{editor.selected_entity}",true);
ent_label[? "visible"] = false;
ui_set_class(ent_label, "editor-panel");
//ent_label_type = ui_add_child(ent_label, ui_create_label(0,0.15,1,0.25,""));
ui_add_child(ent_label,ui_create_button(0,0.9,1,1,"{editor.entity.destroy}","editor_destroy"));
ent_label_attributes = ui_create_label(0,0.15,1,0.9,"");
ui_add_child(ent_label, ent_label_attributes);
ui_add_child(editor_container, ent_label);
ui_add_child(ent_label, ui_create_button(0.9,0,1,0.1,"{editor.io}","editor_logic"));

//entity logic
show_io = false;

logic_window = ui_add_child(editor_container,ui_create_draggable(0.4,0.7,0.7,0.725,"{editor.logic}",true));
logic_window[? "visible"] = false;

world_width = 64;
world_height = 64;
world_name = "unnamed";
world_players = 1;
grid_floor = ds_grid_create(world_width, world_height);
instance_create(0,0,obj_floor);

ui_set_value(input_name, world_name);
ui_set_value(input_width, world_width);
ui_set_value(input_height, world_height);
ui_set_value(input_players, world_players);

//objects panel
lb_selcted_object = ui_add_child(objects_container, ui_create_label(0,0.05,1,0.1,""));
for (var i=0; i&lt;ds_list_size(gp_editor); i++){
  var map = gp_objects[? gp_editor[| i]];
  var u = (i % 2) * 0.5;
  var v = floor(i/2)*0.1+0.1;
  var btn = ui_create_radio(u,v,u+0.5,v+0.1,""/*map[? "name"]*/,map[? "id"]);
  ui_add_child(btn,ui_create_sprite(0.01,0.01,0.99,0.99,map[? "sprite"],0));
  ui_add_child(objects_container,btn);
}

//floors panel
floor_preview = ui_add_child(floors_container, ui_create_texture(0,0.05,1,0.2,floorlist[0, 0],64,64));
var v = 0.2;
sli_brush_size = ui_add_child(floors_container, ui_create_slider(0,0,1,0.05,"{editor.brush_size}",1,8,1));
for (i=0; i&lt;array_height_2d(floorlist); i+=1)
{
  var btn = ui_add_child(floors_container, ui_create_radio(0,v+i*0.05,1,v+i*0.05+0.05,floorlist[i,3],i));
};

//tiles panel
tile_x1 = 0;
tile_y1 = 0;
tile_x2 = 32;
tile_y2 = 32;

tile_dialog = false;
tile_preview = ui_add_child(tiles_container, ui_create_texture(0,0.05,1,0.2,sprite_get_texture(spr_tiles,0),512,512));
//tiles_preview = ui_create_texture(0,0,1,0.2,sprite_get_texture(spr_tiles,0));

ui_add_child(tiles_container, ui_create_button(0,0.2,1,0.25,"{editor.choose_tile}","editor_tile_dialog"));
var v = 0.25;
ui_add_child(tiles_container, ui_create_toggle(0,v,1,v+0.05,"{editor.attribute.collision}"));
ui_set_value(tiles_container, 0);

v+=0.1;
ui_add_child(tiles_container, ui_create_radio(0,v,1,v+0.05,"{editor.tileset.enviroment}",0));
v+=0.05;
ui_add_child(tiles_container, ui_create_radio(0,v,1,v+0.05,"{editor.tileset.mark}",1));

if (global.toLoad != ""){
  world_load(global.toLoad);
  global.toLoad = "";
}

rad_t1[? "gp_port"] = ds_list_find_value(maps_container[? "children"],1);
rad_t2[? "gp_port"] = ds_list_find_value(objects_container[? "children"],0);
rad_t3[? "gp_port"] = ds_list_find_value(tiles_container[? "children"],0);

inst_selected = -1;
inst_hover = 0;
testmode = "";

linkmode = false
linksource = -1;
linkevent = 0;
linktarget = 0;

sun_direction = 45;
sun_length = 1;
sun_intensity = 0.8;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///show logic
console_command_execute("editor_logic");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>show_grid = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///entity handling
inst_hover = -1;
if (instance_exists(ui_hover)){
  inst_hover = ui_hover;
}

if (inst_selected != -1){
  if (mouse_check_button_pressed(mb_right)){
    inst_selected = -1;
    logic_window[? "visible"] = false;
  }
  if (mouse_over(inst_selected.bbox_left, inst_selected.bbox_top, inst_selected.bbox_right, inst_selected.bbox_bottom)){
    inst_hover = inst_selected;
  }
}

if (instance_exists(ui_hover)){
  if (ui_hover.object_index == obj_editor_ent &amp;&amp; inst_hover == 0){
    if (linkmode == false){
      if (mouse_check_button_pressed(mb_left) &amp;&amp; inst_selected != ui_hover){
        inst_selected = ui_hover;
        logic_window[? "visible"] = false;
        with (inst_selected){
          editor_ent_send_to_ui();
          yet_selected = true;
        }
      }
    }else{
      if (mouse_check_button_pressed(mb_left)){
        ds_list_clear(obj_editor.logic_window[? "children"]);
        linktarget = ui_hover;
        v = 1;
        var inputs = ui_hover.src_map[? "inputs"];
        for (var i=0; i&lt;ds_list_size(inputs); i+=1){
          var iid = inputs[| i];
          var label = ui_add_child(obj_editor.logic_window, ui_create_label(0,v,1,v+1,dictionary_action[? iid]));
          ui_add_child(label, ui_create_button(0,0,0.1,1,"+","editor_end_link "+string(iid)));
          v += 1;
        }
      }
    }
  }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///view and UI

view_wview[0] = view_wport[0] / zoom;
view_hview[0] = view_hport[0] / zoom;

if ((mouse_wheel_up() || gamepad_button_check_pressed(0,gp_shoulderrb)) &amp;&amp; tzoom &lt; 16){
  tzoom *= 2;
}
if ((mouse_wheel_down() || gamepad_button_check_pressed(0,gp_shoulderlb)) &amp;&amp; tzoom &gt; 0.25){
  tzoom /= 2;
}
zoom += (tzoom-zoom)/4;

var px = x;
var py = y;
x = clamp(x+gamepad_axis_value(0,gp_axisrh)*10/zoom,0,world_width*32);
y = clamp(y+gamepad_axis_value(0,gp_axisrv)*10/zoom,0,world_height*32);
if (x != px || y != py){
  place_x = x;
  place_y = y;
}

if (mouse_check_button_pressed(mb_middle)){
  drag = true;
  drag_x = mouse_x + view_wview[0] / 2;
  drag_y = mouse_y + view_hview[0] / 2;
}
if (drag){
  x = round(clamp(drag_x - (mouse_x - view_xview[0]),0,world_width*32));
  y = round(clamp(drag_y - (mouse_y - view_yview[0]),0,world_height*32));
  if (mouse_check_button_released(mb_middle)){
    drag = false;
  }
}

view_xview[0] = x - view_wview[0]/2;
view_yview[0] = y - view_hview[0]/2;

ui_set_position(menu_container,ui_interpolate(1,menu_container[? "u1"], -0.3+menu_is_open*0.3, 0.3),0.05);
ui_set_position(maps_container,ui_interpolate(1,maps_container[? "u1"], 1-real(interface[? "editor_menu"] == "1")*0.3, 0.3),0.05);
ui_set_position(objects_container,ui_interpolate(1,objects_container[? "u1"], 1-real(interface[? "editor_menu"] == "2")*0.2, 0.3),0.05);
ui_set_position(tiles_container,ui_interpolate(1,tiles_container[? "u1"], 1-real(interface[? "editor_menu"] == "3")*0.2, 0.3),0.05);
ui_set_position(floors_container,ui_interpolate(1,floors_container[? "u1"], 1-real(interface[? "editor_menu"] == "4")*0.2, 0.3),0.05);
maps_container[? "visible"] = (maps_container[? "u1"]&lt;0.99);
objects_container[? "visible"] = (objects_container[? "u1"]&lt;0.99);
tiles_container[? "visible"] = (tiles_container[? "u1"]&lt;0.99);
floors_container[? "visible"] = (floors_container[? "u1"]&lt;0.99);

if (bind_check_pressed("menu")){
  if (menu_is_open == 0){
    if (interface[? "editor_menu"] != "0"){
      interface[? "editor_menu"] = "0";
    }else{
      menu_is_open = 1;
      ui_gamepad_position = btn_save;
    }
  }else{
    menu_is_open = 0;
    ui_gamepad_position = rad_t1;
  }
  inst_selected = -1;
}
if (gamepad_button_check_pressed(0,gp_face2)){
  if (interface[? "editor_menu"] != "0"){
    if (interface[? "editor_menu"] == "2"){
      ui_gamepad_position = rad_t2; 
    }else if (interface[? "editor_menu"] == "3"){
      ui_gamepad_position = rad_t3;
    }else{
      ui_gamepad_position = rad_t1;
    }
    interface[? "editor_menu"] = "0";
    ui_set_value(topbar, 0);
  }
}

if (interface[? "editor_error"] != ""){
  error[? "visible"] = true;
  error[? "text"] = interface[? "editor_error"];
}else{
  error[? "visible"] = false;
}

if (interface[? "editor_menu"] == "2"){
  var obj_to_place = ui_get_value(objects_container);
  if (obj_to_place != -1){
    var obj = gp_objects[? obj_to_place];
    ui_set_text(lb_selcted_object, lang_format(obj[? "name"]));
    if (mouse_check_button_pressed(mb_right)){
      ui_set_value(objects_container, -1);
    }
  }else{
    ui_set_text(lb_selcted_object, "");
  }
}

ent_label[? "visible"] = (inst_selected != -1);
if (instance_exists(inst_selected) &amp;&amp; inst_selected != -1){
  var map = gp_objects[? inst_selected.gp_obj_index];
  if (map != undefined){  
    //ui_set_text(ent_label_type, lang_format("{editor.entity.type}", map[? "name"]));
  }
}

///tiles
tile_preview[? "texture"] = sprite_get_texture(spr_tiles, ui_get_value(tiles_container));
tile_preview[? "tex_top"] = tile_y1;
tile_preview[? "tex_left"] = tile_x1;
tile_preview[? "tex_width"] = tile_x2 - tile_x1;
tile_preview[? "tex_height"] = tile_y2 - tile_y1;

var index = ui_get_value(floors_container);
if (index != -1){
  floor_preview[? "texture"] = floorlist[index, 0];
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ds_map_destroy(editor_container);
ds_grid_destroy(grid_floor);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(ft_ui);
ui_draw(editor_container);

if (tile_dialog){
  var scale = 1;
  var xx = view_wport[0] / 2 - (256*scale);
  var yy = view_hport[0] / 2 - (256*scale);
  var mx = floor(((window_mouse_get_x() - xx)*scale)/32)*32;
  var my = floor(((window_mouse_get_y() - yy)*scale)/32)*32;
  
  draw_set_color(c_white);
  draw_set_alpha(0.9);
  draw_rectangle(xx,yy,xx+512*scale,yy+512*scale, false);
  draw_set_alpha(1);
  draw_sprite_ext(spr_tiles, ui_get_value(tiles_container), xx, yy, scale, scale, 0, c_white, 1);
  draw_set_color(c_red);
  draw_rectangle(xx+tile_x1*scale, yy+tile_y1*scale, xx+tile_x2*scale, yy+tile_y2*scale, true);
  draw_set_color(c_blue);
  draw_rectangle(xx+mx*scale, yy+my*scale, xx+mx*scale+32, yy+my*scale+32, true);
  if (global_mouse_over_ui(xx,yy,xx+512*scale,yy+512*scale,"tile_dialog")){
    if (mouse_check_button_pressed(mb_left)){
      tile_x1 = mx;
      tile_y1 = my;
    }
    if (mouse_check_button(mb_left)){
      tile_x2 = ceil(((window_mouse_get_x() - xx)*scale)/32)*32;
      tile_y2 = ceil(((window_mouse_get_y() - yy)*scale)/32)*32;
    }
    if (mouse_check_button_released(mb_left)){
      tile_dialog = false;
    }
  }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_color(c_red);
draw_rectangle(0,0,world_width*32, world_height * 32, true);

if (ui_mouse_moved){
  place_x = mouse_x;
  place_y = mouse_y;
}
place_x += gamepad_axis_value(0, gp_axislh);
place_y += gamepad_axis_value(0, gp_axisrh);
if (!keyboard_check(vk_alt)){
  place_x = round(place_x/16)*16;
  place_y = round(place_y/16)*16;
}

if (interface[? "editor_menu"] == "2"){
  var obj_to_place = ui_get_value(objects_container);
  if (obj_to_place != -1){
    show_grid = true;
    var map = gp_objects[? obj_to_place];
    var w = sprite_get_width(map[? "sprite"]);
    var h = sprite_get_width(map[? "sprite"]);
    var ox = sprite_get_xoffset(map[? "sprite"]);
    var oy = sprite_get_yoffset(map[? "sprite"]);
    var c = (ui_hover != -1)//collision_rectangle(place_x-ox, place_y-oy, place_x+w-ox, place_y+h-oy,obj_editor_ent,0,0);
    if (c){
      var color = c_red;
    }else{
      var color = c_lime;
    }
    draw_sprite_ext(map[? "sprite"], 0, place_x, place_y,1,1,0,color,0.3);
    if ((mouse_check_button_pressed(mb_left) || gamepad_button_check_pressed(0, gp_face1)) &amp;&amp; !c){
      var inst = instance_create(place_x,place_y,obj_editor_ent);
      inst.gp_obj_index = obj_to_place;
      ui_set_value(objects_container, -1);
    }
  }
}

if (interface[? "editor_menu"] == "3" &amp;&amp; !tile_dialog &amp;&amp; tile_x1 &gt;= 0){
  var c = (ui_hover != -1)
  draw_sprite_part_ext(spr_tiles, ui_get_value(tiles_container), tile_x1, tile_y1, tile_x2-tile_x1, tile_y2-tile_y1, place_x, place_y, 1, 1, c_white, 0.4);
  if (mouse_check_button_pressed(mb_left) &amp;&amp; !c){
    var inst = instance_create(place_x,place_y,obj_editor_ent);
    inst.gp_obj_index = 9;
    inst.overwrite_attr[? ATTRIBUTE.skin] = ui_get_value(tiles_container);
    inst.overwrite_attr[? ATTRIBUTE.left] = tile_x1;
    inst.overwrite_attr[? ATTRIBUTE.top] = tile_y1;
    inst.overwrite_attr[? ATTRIBUTE.width] = tile_x2 - tile_x1;
    inst.overwrite_attr[? ATTRIBUTE.height] = tile_y2 - tile_y1;
  }
  if (mouse_check_button_pressed(mb_right)){
    tile_x1 = -1;
  }
}

if (interface[? "editor_menu"] == "4"){
  var floor_to_set = ui_get_value(floors_container);
  if (floor_to_set != -1){
    var size = ui_get_value(sli_brush_size);
    var cx = floor(mouse_x/32)-floor(size/2);
    var cy = floor(mouse_y/32)-floor(size/2);
    draw_set_color(c_white);
    draw_set_alpha(0.2);
    draw_rectangle(cx*32, cy*32, cx*32+size*32-1, cy*32+size*32-1, false);
    draw_set_alpha(1);
    var c = (ui_hover != -1)
    if (mouse_check_button(mb_left) &amp;&amp; !c){
      ds_grid_set_region(grid_floor, cx, cy, cx+size-1, cy+size-1, floor_to_set);
      world_floor_update_chunk(floor(cx / obj_floor.chunk_size)    , floor(cy / obj_floor.chunk_size)    );
      world_floor_update_chunk(floor(cx / obj_floor.chunk_size) + 1, floor(cy / obj_floor.chunk_size)    );
      world_floor_update_chunk(floor(cx / obj_floor.chunk_size) - 1, floor(cy / obj_floor.chunk_size)    );
      world_floor_update_chunk(floor(cx / obj_floor.chunk_size)    , floor(cy / obj_floor.chunk_size) + 1);
      world_floor_update_chunk(floor(cx / obj_floor.chunk_size)    , floor(cy / obj_floor.chunk_size) - 1);
      world_floor_update_chunk(floor(cx / obj_floor.chunk_size) + 1, floor(cy / obj_floor.chunk_size) + 1);
      world_floor_update_chunk(floor(cx / obj_floor.chunk_size) + 1, floor(cy / obj_floor.chunk_size) - 1);
      world_floor_update_chunk(floor(cx / obj_floor.chunk_size) - 1, floor(cy / obj_floor.chunk_size) + 1);
      world_floor_update_chunk(floor(cx / obj_floor.chunk_size) - 1, floor(cy / obj_floor.chunk_size) - 1);
    }
    if (mouse_check_button_pressed(mb_right)){
      ui_set_value(floors_container, -1);
    }
  }
}

if (inst_selected != -1){
  draw_set_color(c_red);
  draw_rectangle(inst_selected.bbox_left-2, inst_selected.bbox_top-2, inst_selected.bbox_right+1, inst_selected.bbox_bottom+1, true);
}
if (instance_exists(inst_hover)){
  if (inst_hover.object_index == obj_editor_ent){
    draw_set_color(c_lime);
    draw_rectangle(inst_hover.bbox_left-3, inst_hover.bbox_top-3, inst_hover.bbox_right+2, inst_hover.bbox_bottom+2, true);
    if (inst_hover != inst_selected){
      if (mouse_check_button_pressed(mb_left)){
        inst_selected = inst_hover;
        with (inst_selected){
          editor_ent_send_to_ui();
        }
      }
    }
  }
}

if (show_grid){
  draw_set_color(c_black);
  for (var i=max(floor(view_xview[0]/32),1); i&lt;min(ceil((view_wview[0]+view_xview[0])/32),world_width); i+=1)
  {
    draw_set_color(c_black)
    if ((i mod 4)==0){draw_set_color(c_blue)}
    if ((i mod 16)==0){draw_set_color(c_lime)}
    draw_line(i*32-1,0,i*32-1,world_height*32);
  };
  for (var i=max(floor(view_yview[0]/32),1); i&lt;min(ceil((view_hview[0]+view_yview[0])/32),world_height); i+=1)
  {
    draw_set_color(c_black)
    if ((i mod 4)==0){draw_set_color(c_blue)}
    if ((i mod 16)==0){draw_set_color(c_lime)}
    draw_line(0,i*32-1,world_width*32,i*32-1);
  };
}

if (linkmode){
  if (instance_exists(inst_selected) &amp;&amp; inst_selected != -1){
    draw_set_color(c_lime);
    var ent = inst_selected;
    draw_arrow(ent.x,ent.y,mouse_x,mouse_y,8);
  }else{
    linkmode = false;
  }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
