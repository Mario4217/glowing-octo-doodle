<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>gp_obj_index = -1;
alarm[0] = 1;
outputs = ds_list_create();
inputs = ds_list_create();
drag = false;
drag_x = 0;
drag_y = 0;
attr = ds_map_create();
overwrite_attr = ds_map_create();
src_map = -1;
size_drag = false;
yet_selected = false;

init = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for (var i=0; i&lt;ds_list_size(inputs); i++){
  var map = inputs[| i];
  ds_list_delete(map[? "source"].outputs, ds_list_find_index(map[? "source"].outputs, map));
  ds_map_destroy(map);
}
for (i=0; i&lt;ds_list_size(outputs); i+=1){
  var map = outputs[| i];
  ds_list_delete(map[? "target"].inputs, ds_list_find_index(map[? "target"].inputs, map));
  ds_map_destroy(map);
};

ds_list_destroy(inputs);
ds_list_destroy(outputs);
ds_map_destroy(attr);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (gp_obj_index == -1){
  instance_destroy();
}else{
  var map = gp_objects[? gp_obj_index];
  src_map = map;
  sprite_index = map[? "sprite"];
  image_index = 0;
  image_speed = 0;
  var attr_map = map[? "attr"];
  var key = ds_map_find_first(attr_map);
  for (var i=0; i&lt;ds_map_size(attr_map); i+=1)
  {
     var src_attr = attr_map[? key];
     attr[? key] = src_attr[? "default"];
     key = ds_map_find_next(attr_map,key);
  };
}
if (ds_map_size(overwrite_attr) &gt; 0){
  var key = ds_map_find_first(overwrite_attr);
  for (var i=0; i&lt;ds_map_size(overwrite_attr); i+=1)
  {
    attr[? key] = overwrite_attr[? key];
    var key = ds_map_find_next(overwrite_attr, key);
  };
}
ds_map_destroy(overwrite_attr);

init = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>yet_selected = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (interface[? "editor_menu"] == "2" || interface[? "editor_menu"] == "3" &amp;&amp; src_map[? "id"] == 9)
if (mouse_x &gt; x-sprite_xoffset &amp;&amp; mouse_x &lt; x+sprite_width-sprite_xoffset &amp;&amp; mouse_y &gt; y-sprite_yoffset &amp;&amp; mouse_y &lt; y+sprite_height-sprite_yoffset){
  ui_mouseHover = id;
}

depth = obj_editor.world_height*32 - bbox_bottom;

if (obj_editor.inst_selected == id){
  //depth = 0;
  draw_set_color(c_lime);
  if (keyboard_check_pressed(vk_delete)){
    console_command_execute("editor_destroy");
  }
  if (ui_hover &gt; 100000 &amp;&amp; mouse_over(bbox_left, bbox_top, bbox_right, bbox_bottom)){
    if (mouse_check_button_pressed(mb_left)){
      drag = true;
      drag_x = x - mouse_x;
      drag_y = y - mouse_y;
    }
  }
}

/*if (ui_hover == id &amp;&amp; obj_editor.inst_selected != id){
  if (mouse_check_button_pressed(mb_left)){
    drag = true;
    drag_x = mouse_x - x;
    drag_y = mouse_y - y;
  }
}*/

if (drag &amp;&amp; obj_editor.inst_selected == id){
  obj_editor.show_grid = true;
  var snap = 16;
  if (keyboard_check(vk_alt)){snap = 1;}
  x = round((mouse_x + drag_x)/snap)*snap;
  y = round((mouse_y + drag_y)/snap)*snap;
  if (mouse_check_button_released(mb_left)){
    drag = false;
  }
  world_update_region(bbox_left,bbox_top,bbox_right,bbox_bottom);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for (var i=0; i&lt;ds_list_size(outputs); i+=1){
  var map = outputs[| i];
  draw_set_color(c_lime);
  draw_arrow(x,y+i*5,map[? "target"].x, map[? "target"].y+i*5, 8);
};
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var hov = (ui_hover &gt; 100000 &amp;&amp; mouse_over(bbox_left, bbox_top, bbox_right, bbox_bottom) &amp;&amp; obj_editor.inst_selected == id);

if (attr[? ATTRIBUTE.skin] != undefined){
  image_index = attr[? ATTRIBUTE.skin];
}

switch (gp_obj_index){
  case 3: //wall
    var width = attr[? ATTRIBUTE.width];
    var height = attr[? ATTRIBUTE.height];
    var yy = height + y - 64;
    for (var i=0; i&lt;floor(width/64); i+=1){
      draw_sprite(sprite_index, image_index, x+i*64, yy);
    };
    draw_sprite_part(sprite_index, image_index, 0, 0, width mod 64, sprite_height, x+i*64, yy);
    
    draw_sprite_area(spr_wall_top, image_index, x, y, x+width, yy);
    
    image_xscale = width / 64;
    image_yscale = height / 64;
    
    var ho = (mouse_over(bbox_right-32, bbox_bottom-32, bbox_right, bbox_bottom) &amp;&amp; hov);
    
    if (obj_editor.inst_selected == id){
      var o = min(32, attr[? ATTRIBUTE.width]);
      draw_sprite_part(spr_scaleable, ho, 0, 0, o, attr[? ATTRIBUTE.height], bbox_right-o, bbox_bottom-32);
    }
    if (ho){
      if (mouse_check_button_pressed(mb_left)){
        drag = false;
        size_drag = true;
        size_drag_x = attr[? ATTRIBUTE.width] - mouse_x;
        size_drag_y = attr[? ATTRIBUTE.height] - mouse_y;
      }
    }
    if (size_drag){
      obj_editor.show_grid = true;
      attr[? ATTRIBUTE.width] = floor(clamp(size_drag_x + mouse_x,16,1024)/16)*16;
      attr[? ATTRIBUTE.height] = floor(clamp(size_drag_y + mouse_y,64,1024)/16)*16;
      if (mouse_check_button_released(mb_left)){
        size_drag = false;
        editor_ent_send_to_ui();
      }
      world_update_region(bbox_left,bbox_top,bbox_right,bbox_bottom);
    }
  break;
  case 4: //light wall
    var ho = (mouse_over(bbox_right-32, bbox_bottom-32, bbox_right, bbox_bottom) &amp;&amp; hov);
    if (attr[? ATTRIBUTE.orientation] == 0){ //horizontal
      image_xscale = attr[? ATTRIBUTE.size] / 64;
      image_yscale = 1;
      draw_sprite_area(spr_gp_barricade, image_index, x, y, x+attr[? ATTRIBUTE.size], y+64);
      draw_sprite(spr_gp_barricade_left, image_index, x, y);
      draw_sprite_ext(spr_gp_barricade_left, image_index, x+attr[? ATTRIBUTE.size], y,-1,1,0,c_white,1);      
      if (obj_editor.inst_selected == id){
        draw_sprite_part(spr_scaleable, ho, 0, 0, min(32, attr[? ATTRIBUTE.size]), 32, bbox_right-32, bbox_bottom-32);
      }
      if (ho){
        if (mouse_check_button_pressed(mb_left)){
          drag = false;
          size_drag = true;
          size_drag_x = attr[? ATTRIBUTE.size] - mouse_x;
        }
      }
      if (size_drag){
        obj_editor.show_grid = true;
        attr[? ATTRIBUTE.size] = floor(clamp(size_drag_x + mouse_x,64,1024)/16)*16;
        if (mouse_check_button_released(mb_left)){
          size_drag = false;
          editor_ent_send_to_ui();
        }
      }
    }else{ //vertical
      image_yscale = attr[? ATTRIBUTE.size] / 64;
      image_xscale = 0.5;
      draw_sprite(spr_gp_barricade_top, image_index, x, y);
      draw_sprite_area(spr_gp_barricade, image_index, x+4, y+4, x+12, y+attr[? ATTRIBUTE.size]);
      draw_sprite(spr_gp_barricade_bottom, image_index, x, y+attr[? ATTRIBUTE.size]-64);
      if (obj_editor.inst_selected == id){
        draw_sprite_part(spr_scaleable, ho, 0, 0, min(32, attr[? ATTRIBUTE.size]), 32, bbox_right-32, bbox_bottom-32,);
      }
      if (ho){
        if (mouse_check_button_pressed(mb_left)){
          drag = false;
          size_drag = true;
          size_drag_y = attr[? ATTRIBUTE.size] - mouse_y;
        }
      }
      if (size_drag){
        obj_editor.show_grid = true;
        attr[? ATTRIBUTE.size] = floor(clamp(size_drag_y + mouse_y,64,1024)/16)*16;
        if (mouse_check_button_released(mb_left)){
          size_drag = false;
          editor_ent_send_to_ui();
        }
      }
    }
  break;
  case 9: //tile
    image_xscale = attr[? ATTRIBUTE.width] / 32;
    image_yscale = attr[? ATTRIBUTE.height] / 32;
    draw_sprite_part(spr_tiles, image_index, attr[? ATTRIBUTE.left], attr[? ATTRIBUTE.top], attr[? ATTRIBUTE.width], attr[? ATTRIBUTE.height], x, y);
  break;
  default:
    draw_self();
}

if (attr[? ATTRIBUTE.orientation] != undefined){
  if (obj_editor.inst_selected == id){
    var ho = (mouse_over(x, y, x+32, y+32) &amp;&amp; hov);
    draw_sprite(spr_rotatable, ho, x, y);
    if (mouse_check_button_pressed(mb_left) &amp;&amp; ho &amp;&amp; !yet_selected){
      attr[? ATTRIBUTE.orientation] = 1-attr[? ATTRIBUTE.orientation];
      editor_ent_send_to_ui();
      drag = false;
    }
  }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
